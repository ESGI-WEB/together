package swagger

import (
	"github.com/zc2638/swag"
	"github.com/zc2638/swag/endpoint"
	"github.com/zc2638/swag/option"
	"net/http"
	"together/controllers"
	"together/models"
)

func SetupPollSwagger() *swag.API {
	api := swag.New(
		option.Title("Poll API Doc"),
		option.SecurityScheme("bearer_auth",
			option.APIKeySecurity("Authorization", "header"),
		),
		option.Tag("Poll", "Endpoints related to poll operations"),
	)

	pollController := controllers.NewPollController()

	api.AddEndpoint(
		endpoint.New(
			http.MethodPost, "/polls",
			endpoint.Handler(pollController.CreatePoll),
			endpoint.Summary("Create a new poll"),
			endpoint.Description("Create a new poll"),
			endpoint.Body(models.PollCreateOrEdit{}, "Poll data", true),
			endpoint.Response(http.StatusCreated, "Successfully created poll", endpoint.SchemaResponseOption(models.Poll{})),
			endpoint.Response(http.StatusNotFound, "Event not found", endpoint.SchemaResponseOption(models.Poll{})),
			endpoint.Response(http.StatusBadRequest, "Invalid input"),
			endpoint.Response(http.StatusForbidden, "User not authorized"),
			endpoint.Response(http.StatusUnprocessableEntity, "Validation error"),
			endpoint.Response(http.StatusUnauthorized, "User not authenticated"),
			endpoint.Response(http.StatusInternalServerError, "Internal server error"),
			endpoint.Security("bearer_auth"),
			endpoint.Tags("Poll"),
		),
		endpoint.New(
			http.MethodGet, "/polls/event/{eventId}",
			endpoint.Handler(pollController.GetPollsByEventID),
			endpoint.Query("page", "integer", "Page number", false),
			endpoint.Query("limit", "integer", "Number of items per page", false),
			endpoint.Query("closed", "boolean", "Filter by closed status", false),
			endpoint.Summary("Get polls by event ID"),
			endpoint.Description("Get polls by event ID"),
			endpoint.Path("eventId", "integer", "Event ID", true),
			endpoint.Response(http.StatusOK, "Successfully retrieved polls", endpoint.SchemaResponseOption([]models.Poll{})),
			endpoint.Response(http.StatusBadRequest, "Invalid input"),
			endpoint.Response(http.StatusNotFound, "Event not found"),
			endpoint.Response(http.StatusUnauthorized, "User not authenticated"),
			endpoint.Response(http.StatusInternalServerError, "Internal server error"),
			endpoint.Security("bearer_auth"),
			endpoint.Tags("Poll"),
		),
		endpoint.New(
			http.MethodGet, "/polls/group/{groupId}",
			endpoint.Handler(pollController.GetPollsByGroupID),
			endpoint.Query("page", "integer", "Page number", false),
			endpoint.Query("limit", "integer", "Number of items per page", false),
			endpoint.Query("closed", "boolean", "Filter by closed status", false),
			endpoint.Summary("Get polls by group ID"),
			endpoint.Description("Get polls by group ID"),
			endpoint.Path("groupId", "integer", "Group ID", true),
			endpoint.Response(http.StatusOK, "Successfully retrieved polls", endpoint.SchemaResponseOption([]models.Poll{})),
			endpoint.Response(http.StatusBadRequest, "Invalid input"),
			endpoint.Response(http.StatusNotFound, "Group not found"),
			endpoint.Response(http.StatusUnauthorized, "User not authenticated"),
			endpoint.Response(http.StatusInternalServerError, "Internal server error"),
			endpoint.Security("bearer_auth"),
			endpoint.Tags("Poll"),
		),
		endpoint.New(
			http.MethodGet, "/polls/{pollId}",
			endpoint.Handler(pollController.GetPoll),
			endpoint.Summary("Get poll by ID"),
			endpoint.Description("Get poll by ID"),
			endpoint.Path("pollId", "integer", "Poll ID", true),
			endpoint.Response(http.StatusOK, "Successfully retrieved poll", endpoint.SchemaResponseOption(models.Poll{})),
			endpoint.Response(http.StatusBadRequest, "Invalid input"),
			endpoint.Response(http.StatusNotFound, "Poll not found"),
			endpoint.Response(http.StatusUnauthorized, "User not authenticated"),
			endpoint.Response(http.StatusInternalServerError, "Internal server error"),
			endpoint.Tags("Poll"),
		),
		endpoint.New(
			http.MethodPut, "/polls/{pollId}",
			endpoint.Handler(pollController.EditPoll),
			endpoint.Summary("Edit poll"),
			endpoint.Description("Edit poll"),
			endpoint.Path("pollId", "integer", "Poll ID", true),
			endpoint.Body(models.PollCreateOrEdit{}, "Poll data", true),
			endpoint.Response(http.StatusOK, "Successfully edited poll", endpoint.SchemaResponseOption(models.Poll{})),
			endpoint.Response(http.StatusBadRequest, "Invalid input"),
			endpoint.Response(http.StatusNotFound, "Poll not found"),
			endpoint.Response(http.StatusForbidden, "User not authorized"),
			endpoint.Response(http.StatusUnprocessableEntity, "Validation error"),
			endpoint.Response(http.StatusUnauthorized, "User not authenticated"),
			endpoint.Response(http.StatusInternalServerError, "Internal server error"),
			endpoint.Security("bearer_auth"),
			endpoint.Tags("Poll"),
		),
		endpoint.New(
			http.MethodDelete, "/polls/{pollId}",
			endpoint.Handler(pollController.DeletePoll),
			endpoint.Summary("Delete poll"),
			endpoint.Description("Delete poll"),
			endpoint.Path("pollId", "integer", "Poll ID", true),
			endpoint.Response(http.StatusNoContent, "Successfully deleted poll"),
			endpoint.Response(http.StatusBadRequest, "Invalid input"),
			endpoint.Response(http.StatusNotFound, "Poll not found"),
			endpoint.Response(http.StatusForbidden, "User not authorized"),
			endpoint.Response(http.StatusUnauthorized, "User not authenticated"),
			endpoint.Response(http.StatusInternalServerError, "Internal server error"),
			endpoint.Security("bearer_auth"),
			endpoint.Tags("Poll"),
		),
		endpoint.New(
			http.MethodPost, "/polls/{pollId}/choice",
			endpoint.Handler(pollController.AddChoice),
			endpoint.Summary("Add choice to poll"),
			endpoint.Description("Add choice to poll"),
			endpoint.Path("pollId", "integer", "Poll ID", true),
			endpoint.Body(models.PollAnswerChoiceCreateOrEdit{}, "Choice data", true),
			endpoint.Response(http.StatusCreated, "Successfully added choice", endpoint.SchemaResponseOption(models.PollAnswerChoice{})),
			endpoint.Response(http.StatusBadRequest, "Invalid input"),
			endpoint.Response(http.StatusNotFound, "Poll not found"),
			endpoint.Response(http.StatusForbidden, "User not authorized"),
			endpoint.Response(http.StatusUnprocessableEntity, "Validation error"),
			endpoint.Response(http.StatusUnauthorized, "User not authenticated"),
			endpoint.Response(http.StatusInternalServerError, "Internal server error"),
			endpoint.Security("bearer_auth"),
			endpoint.Tags("Poll"),
		),
		endpoint.New(
			http.MethodDelete, "/polls/{pollId}/choice/{choiceId}",
			endpoint.Handler(pollController.DeleteChoice),
			endpoint.Summary("Delete choice from poll"),
			endpoint.Description("Delete choice from poll"),
			endpoint.Path("pollId", "integer", "Poll ID", true),
			endpoint.Path("choiceId", "integer", "Choice ID", true),
			endpoint.Response(http.StatusNoContent, "Successfully deleted choice"),
			endpoint.Response(http.StatusBadRequest, "Invalid input"),
			endpoint.Response(http.StatusNotFound, "Poll or choice not found"),
			endpoint.Response(http.StatusForbidden, "User not authorized"),
			endpoint.Response(http.StatusUnauthorized, "User not authenticated"),
			endpoint.Response(http.StatusInternalServerError, "Internal server error"),
			endpoint.Security("bearer_auth"),
			endpoint.Tags("Poll"),
		),
		endpoint.New(
			http.MethodPost, "/polls/{pollId}/choice/{choiceId}/select",
			endpoint.Handler(pollController.SelectChoice),
			endpoint.Summary("Select choice"),
			endpoint.Description("Select choice"),
			endpoint.Path("pollId", "integer", "Poll ID", true),
			endpoint.Path("choiceId", "integer", "Choice ID", true),
			endpoint.Response(http.StatusNoContent, "Successfully selected choice"),
			endpoint.Response(http.StatusConflict, "Choice already selected"),
			endpoint.Response(http.StatusBadRequest, "Invalid input"),
			endpoint.Response(http.StatusNotFound, "Poll or choice not found"),
			endpoint.Response(http.StatusForbidden, "User not authorized"),
			endpoint.Response(http.StatusUnauthorized, "User not authenticated"),
			endpoint.Response(http.StatusInternalServerError, "Internal server error"),
			endpoint.Security("bearer_auth"),
			endpoint.Tags("Poll"),
		),
		endpoint.New(
			http.MethodPost, "/polls/{pollId}/choice/{choiceId}/deselect",
			endpoint.Handler(pollController.DeselectChoice),
			endpoint.Summary("Deselect choice"),
			endpoint.Description("Deselect choice"),
			endpoint.Path("pollId", "integer", "Poll ID", true),
			endpoint.Path("choiceId", "integer", "Choice ID", true),
			endpoint.Response(http.StatusNoContent, "Successfully deselected choice"),
			endpoint.Response(http.StatusBadRequest, "Invalid input"),
			endpoint.Response(http.StatusNotFound, "Poll or choice not found"),
			endpoint.Response(http.StatusForbidden, "User not authorized"),
			endpoint.Response(http.StatusUnauthorized, "User not authenticated"),
			endpoint.Response(http.StatusInternalServerError, "Internal server error"),
			endpoint.Security("bearer_auth"),
			endpoint.Tags("Poll"),
		),
	)

	return api
}
